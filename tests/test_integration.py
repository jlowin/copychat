import pytest
from pasteurize.core import scan_directory, DiffMode
from pasteurize.format import format_files


def test_basic_scan(sample_project):
    """Test basic file scanning functionality."""
    files = scan_directory(
        sample_project,
        include=["py", "js", "css"],
        verbose=True,
    )

    # Check we found the expected file types
    extensions = {f.suffix.lstrip(".") for f in files}
    assert extensions == {"py", "js", "css"}

    # Check we found files in nested directories
    assert any("utils" in str(f) for f in files)
    assert any("styles" in str(f) for f in files)


def test_gitignore_handling(sample_project):
    """Test that .gitignore patterns are respected."""
    files = scan_directory(sample_project, include=["py", "env"])

    # These should be excluded by .gitignore
    paths = {str(f) for f in files}
    assert not any(f.endswith(".pyc") for f in paths)
    assert not any("__pycache__" in f for f in paths)
    assert not any(f.endswith(".env") for f in paths)


def test_formatting_output(sample_project):
    """Test the formatting of scanned files."""
    files = scan_directory(sample_project, include=["py", "js"])
    result = format_files(list(files))

    # Check XML structure
    assert "<file " in result
    assert "</file>" in result

    # Check file paths are relative
    assert 'path="src/main.py"' in result
    assert 'path="src/app.js"' in result

    # Check language detection
    assert 'language="python"' in result
    assert 'language="javascript"' in result

    # Check line numbers
    assert "1|def main():" in result
    assert "1|function App()" in result


def test_different_file_types(sample_project):
    """Test handling of different file types."""
    files = scan_directory(
        sample_project,
        include=["yml", "sql", "ts", "md"],
    )
    result = format_files(list(files))

    # Check various file types are properly formatted
    assert 'language="yaml"' in result
    assert 'language="sql"' in result
    assert 'language="typescript"' in result
    assert 'language="markdown"' in result

    # Check content snippets from each type
    assert "CREATE TABLE users" in result
    assert "interface User" in result
    assert "TestApp" in result
    assert "# Test Project" in result


def test_exclusion_patterns(sample_project):
    """Test explicit exclusion patterns."""
    files = scan_directory(
        sample_project,
        include=["py", "js"],
        extra_patterns=["**/utils/*"],  # Exclude utils directory
    )

    paths = {str(f) for f in files}
    assert not any("utils" in p for p in paths)
    assert any("main.py" in p for p in paths)


def test_empty_directory(tmp_path):
    """Test handling of empty directories."""
    files = scan_directory(tmp_path)
    result = format_files(list(files))
    assert "No files found" in result


def test_header_metadata(sample_project):
    """Test header metadata in formatted output."""
    files = scan_directory(sample_project, include=["py"])
    result = format_files(list(files))

    # Check header contains important metadata
    assert "Generated by pasteurize on" in result
    assert "Root path:" in result
    assert "Files:" in result

    # Check file list in header
    assert "- src/main.py" in result
    assert "- src/utils/helpers.py" in result


@pytest.mark.parametrize(
    "diff_mode",
    [
        DiffMode.FULL,
        DiffMode.FULL_WITH_DIFF,
        # Removing these modes for now as they require git setup
        # DiffMode.CHANGED_WITH_DIFF,
        # DiffMode.DIFF_ONLY,
    ],
)
def test_diff_modes(sample_project, diff_mode):
    """Test different diff modes."""
    files = scan_directory(
        sample_project,
        include=["py"],
        diff_mode=diff_mode,
    )
    assert len(files) > 0


def test_token_estimation(sample_project):
    """Test token estimation functionality."""
    files = scan_directory(sample_project, include=["py", "js"])
    result = format_files(list(files))

    # Result should include character and token counts in header
    assert "Characters:" in result
    assert "Estimated tokens:" in result

    # Basic sanity check - content should be non-empty
    assert len(result) > 0


def test_error_handling(sample_project, tmp_path):
    """Test error handling for problematic files."""
    # Create an unreadable file in the temporary directory
    bad_file = tmp_path / "bad.py"
    bad_file.write_text("def bad():\n    pass\n")
    bad_file.chmod(0o000)  # Remove read permissions

    # Include both the sample project and the tmp directory
    files = list(scan_directory(sample_project, include=["py"]))
    files.append(bad_file)

    result = format_files(files)

    # Should include error message but continue processing
    assert "Error processing" in result
    assert "main.py" in result  # Should still process good files

    # Cleanup
    bad_file.chmod(0o666)
    bad_file.unlink()
